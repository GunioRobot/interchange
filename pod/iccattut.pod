.\" Automatically generated by Pod::Man version 1.02
.\" Wed Mar 28 00:17:46 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "ICBACKOFFICE 1"
.TH ICBACKOFFICE 1 "perl v5.6.0" "2001-03-28" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Interchange Back Office
.SH "Interchange Back Office"
.IX Header "Interchange Back Office"
Interchange is the industry's most widely distributed and implemented
open source e-commerce platform. This document describes how to
administer a commerce site with Interchange's back-office
functionality, and discusses site management and security.
.SH "Tracking and Back-End Order Entry"
.IX Header "Tracking and Back-End Order Entry"
Interchange allows the entry of orders into a system through one of
several methods. The \f(CW\*(C`AsciiBackend\*(C'\fR capability allows submission of
parameters to an external order entry script. Support for \s-1SQL\s0 allows
the entry of orders directly into an \s-1SQL\s0 database. Orders can be
written to an \s-1ASCII\s0 file. They can be formatted precisely for
e-mail-based systems. The orders can be placed in a \s-1DBM\s0 file. Finally,
embedded Perl allows completely flexible order entry, including
real-time credit card verification and settlement.
.Sh "\s-1ASCII\s0 Backup Order Tracking"
.IX Subsection "ASCII Backup Order Tracking"
If \f(CW\*(C`AsciiTrack\*(C'\fR is set to a legal file name (based in VendRoot unless
it has a leading \*(L"/\*(R"). A copy of the order is saved and sent in an
e-mail.
.PP
If the file name string begins with a pipe \*(L"|,\*(R" a program will be run
and the output \*(L"piped\*(R" to that program. This allows easy back-end
entry of orders with an external program.
.Sh "Database Tracking"
.IX Subsection "Database Tracking"
Once the order report is processed, the order is complete. Therefore,
it is the ideal place to put Interchange tags that make order entries
in database tables.
.PP
A good model is to place a single record in a database summarizing the
order and a series of lines that correspond to each line item in the
order. This can be in the same database table. If the order number
itself is the key for the summary, a line number can be appended to
the order number to show each line of the order.
.PP
The following would summarize a sample order number S00001 for part
number 00\-0011 and 99\-102:
.PP
.Vb 4
\&   code     order_number part_number  quantity   price    shipping  tax
\&   S00001   S00001                    3          2010     12.72     100.50
\&   S00001-1 S00001       00-0011      2          1000     UPS       yes
\&   S00001-2 S00001       99-102       1          10       UPS       yes
.Ve
Fields can be added where needed, perhaps with order status, shipping
tracking number, address, customer number, or other information.
.PP
The above is accomplished with Interchange's \f(CW\*(C`[import ....]\*(C'\fR tag
using the convenient \f(CW\*(C`NOTES\*(C'\fR format:
.PP
.Vb 2
\&   [set import_status]
\&   [import table=orders type=LINE continue=NOTES]
.Ve
.Vb 6
\&   code: [value mv_order_number]
\&   order_number: [value mv_order_number]
\&   quantity: [nitems]
\&   price: [subtotal noformat=1]
\&   shipping: [shipping noformat=1]
\&   tax: [salestax noformat=1]
.Ve
.Vb 1
\&   [/import]
.Ve
.Vb 2
\&   [item-list]
\&   [import table=orders type=LINE continue=NOTES]
.Ve
.Vb 6
\&   code: [value mv_order_number]-[item-increment]
\&   order_number: [value mv_order_number]
\&   quantity: [item-quantity]
\&   price: [item-price noformat=1]
\&   shipping: [shipping-description]
\&   tax: [if-item-field nontaxable]No[else]Yes[/else][/if]
.Ve
.Vb 1
\&   [/import][/item-list]
.Ve
.Sh "Custom Order Routing"
.IX Subsection "Custom Order Routing"
Interchange can send order emails and perform custom credit card
charges and/or logging for each item. The Route directive is used to
control this behavior, along with the \f(CW\*(C`mv_order_route\*(C'\fR item attribute
and \f(CW\*(C`mv_order_route\*(C'\fR form variable.
.PP
Routes are established with the \f(CW\*(C`Route\*(C'\fR directive, which is similar
to the \f(CW\*(C`Locale\*(C'\fR directive. Each route is like a locale, so that
key-value pairs can be set. Here is an example setting:
.PP
.Vb 6
\&   Route  VEN  pgp_key         0x67798115
\&   Route  VEN  email           orders@akopia.com
\&   Route  VEN  reply           service@akopia.com
\&   Route  VEN  encrypt         1
\&   Route  VEN  encrypt_program "/usr/bin/pgpe -fat -q -r %s"
\&   Route  VEN  report          etc/report_mail
.Ve
This route would be used whenever the value \f(CW\*(C`VEN\*(C'\fR was contained in
the form variable \f(CW\*(C`mv_order_route\*(C'\fR.
.PP
The last route that is defined provides the defaults for all other
routes. For example, if \f(CW\*(C`encrypt_program\*(C'\fR is set there, then the same
value will be the default for all routes.
.PP
The attributes that can be set are:
.Ip "attach" 4
.IX Item "attach"
Determines whether the order report should be attached to the main
order report e-mail. This is useful if certain items must be printed
separately from others, perhaps for \s-1FAX\s0 to a fulfillment house.
.Ip "counter" 4
.IX Item "counter"
The location of a counter file which should be used instead of
\&\f(CW\*(C`OrderCounter\*(C'\fR for this route. It will generate a different value for
\&\f(CW\*(C`mv_order_number\*(C'\fR for the route.
.Ip "credit_card" 4
.IX Item "credit_card"
Determines whether credit card encryption should be done for this
order. Either this or \f(CW\*(C`encrypt\*(C'\fR should always be set.
.Ip "cybermode" 4
.IX Item "cybermode"
If this is set, enables \fICyberCash\fR for the route. Variables can also
be set for \f(CW\*(C`CYBER_CONFIGFILE\*(C'\fR, \f(CW\*(C`CYBER_SECRET\*(C'\fR, and all other normal
\&\s-1CYBERCASH\s0 variables. For example:
.Sp
.Vb 2
\&   Route VEN cybermode         mau   Route VEN CYBER_CONFIGFILE  config/vendor1_cfg
\&   Route VEN CYBER_VERSION     3.2
.Ve
honly
.Ip "email" 4
.IX Item "email"
The email address(es) where the order should be sent. Set just like
the \f(CW\*(C`MailOrderTo\*(C'\fR directive, which is also the default.
.Ip "encrypt" 4
.IX Item "encrypt"
Whether the entire order should be encrypted with the
\&\fBencrypt_program\fR. If \f(CW\*(C`credit_card\*(C'\fR is set, the credit card will
first be encrypted, then the entire order encrypted.
.Ip "encrypt_program" 4
.IX Item "encrypt_program"
The encryption program incantaton which should be used. Set
identically to the \f(CW\*(C`EncryptProgram\*(C'\fR directive, except that \f(CW%s\fR will be
replaced with the \f(CW\*(C`pgp_key\*(C'\fR. Default is \f(CW\*(C`pgpe \-fat \-r %s\*(C'\fR.
.Ip "errors_to" 4
.IX Item "errors_to"
Sets the \f(CW\*(C`Errors\-To:\*(C'\fR e-mail header so that bounced orders will go to
the proper address. Default is the same as \f(CW\*(C`MailOrderTo\*(C'\fR.
.Ip "increment" 4
.IX Item "increment"
Whether the order number should be incremented as a result of this
result. Default is not to increment, as the order number should
usually be the same for different routes within the same customer
order.
.Ip "individual_track" 4
.IX Item "individual_track"
A directory where individual order tracking files will be placed. The
file name will correspond to the value of \f(CW\*(C`mv_order_number\*(C'\fR. This can
be useful for batching orders via download.
.Ip "individual_track_ext" 4
.IX Item "individual_track_ext"
The extension that will be added to the file name for
\&\f(CW\*(C`individual_track\*(C'\fR. Must contain a period (\f(CW\*(C`.\*(C'\fR), if that is desired.
.Sp
.Vb 1
\&   individual_track_ext     .pgp
.Ve
.Ip "pgp_cc_key" 4
.IX Item "pgp_cc_key"
The \s-1PGP\s0 key selector that is used to determine which public key is
used for encryption of credit cards only. With \s-1PGP\s0 5 and 6, see
appropriate values by using the command \f(CW\*(C`pgpk \-l\*(C'\fR.
.Ip "pgp_key" 4
.IX Item "pgp_key"
The \s-1PGP\s0 key selector that is used to determine which public key is
used for encryption. If \f(CW\*(C`pgp_cc_key\*(C'\fR is set, that key will be used
for credit card encryption instead of \f(CW\*(C`pgp_key\*(C'\fR. With \s-1PGP\s0 5 and 6,
see appropriate values by using the command \f(CW\*(C`pgpk \-l\*(C'\fR.
.Ip "profile" 4
.IX Item "profile"
The custom order profile which should be performed to check the order.
If it fails, the route will not be performed. See \f(CW\*(C`OrderProfile\*(C'\fR and
\&\f(CW\*(C`mv_order_profile\*(C'\fR.
.Ip "receipt" 4
.IX Item "receipt"
The receipt page that should be used for this routing. This only
applies if supplant is set for the route.
.Ip "report" 4
.IX Item "report"
The report page that should be used for this routing. If \f(CW\*(C`attach\*(C'\fR is
defined, the contents of the report will be placed in a \s-1MIME\s0
attachment in the main order report.
.Ip "reply" 4
.IX Item "reply"
The \f(CW\*(C`Reply\-To\*(C'\fR header that should be set. Default is the same as
\&\f(CW\*(C`email\*(C'\fR.
.Sp
If there are only word characters (A-Za-z0\-9 and underscore), it
describes an Interchange variable name where the address can be found.
.Ip "supplant" 4
.IX Item "supplant"
Whether this route should supplant the main order report. If set, the
\&\f(CW\*(C`AsciiTrack\*(C'\fR operation will use this route and the normal Interchange
order e-mail sequence will not be performed.
.Ip "track" 4
.IX Item "track"
The name of a file which should be used for tracking. If the
\&\f(CW\*(C`supplant\*(C'\fR attribute is set, the normal order tracking will be used
as well.
.Ip "track_mode" 4
.IX Item "track_mode"
A number representing the mode to change either \f(CW\*(C`track\*(C'\fR or
\&\f(CW\*(C`individual_track\*(C'\fR files.
.PP
An individual item routing causes all items labeled with that route to
be placed in a special sub-cart that will be used for the order
report. This means that the \f(CW\*(C`[item\-list] LIST [/item\-list]\*(C'\fR will only
contain those items, allowing operations to be performed on subsets of
the complete order.
.PP
Here is an example of an order routing:
.PP
.Vb 6
\&   Route  HARD  pgp_key          0x67798115
\&   Route  HARD  email            hardgoods@akopia.com
\&   Route  HARD  reply            service@akopia.com
\&   Route  HARD  encrypt          1
\&   Route  HARD  encrypt_program  "/usr/bin/pgpe -fat -q -r %s"
\&   Route  HARD  report           etc/report_mail
.Ve
.Vb 3
\&   Route  SOFT  email            ""
\&   Route  SOFT  profile          create_download_link
\&   Route  SOFT  empty            1
.Ve
.Vb 9
\&   Route  main  cybermode        mauthonly
\&   Route  main  CYBER_VERSION    3.2
\&   Route  main  CYBER_CONFIGFILE etc/cybercash.cfg
\&   Route  main  pgp_key          0x67798115
\&   Route  main  email            orders@akopia.com
\&   Route  main  reply            service@akopia.com
\&   Route  main  encrypt          1
\&   Route  main  encrypt_program  "/usr/bin/pgpe -fat -q -r %s"
\&   Route  main  report           etc/report_all
.Ve
To tell Interchange that order routing is in effect, the variable
\&\f(CW\*(C`mv_order_route\*(C'\fR is set on the final order submission form:
.PP
.Vb 1
\&   <INPUT TYPE="hidden" NAME="mv_order_route" VALUE="main">
.Ve
To set the order routing for individual items, some method of
determining their status must be made and the \f(CW\*(C`mv_order_route\*(C'\fR
attribute must be set. This could be set at the time of the item being
placed in the basket, or have a database field called \f(CW\*(C`goods_type\*(C'\fR
set to the appropriate value. The following example uses a Perl
routine on the final order form:
.PP
.Vb 19
\& [perl arg=carts interpolate=1]
\&   my $string = <<'EOF';
\&[item-list][item-code]  [item-field goods_type]
\&[/item-list]
\&EOF
\&   my @items;
\&   my %route;
\&   @items = grep /\eS/, split /\en+/, $string;
\&   for(@items) {
\&       my ($code, $keycode) = split /\et/, $_;
\&       $route{$code} = $keycode;
\&   }
\&   my $cart = $Carts->{'main'};
\&   my $item;
\&   foreach $item ( @{ $Carts->{'main'} } ) {
\&       $item->{mv_order_route} = $route{$item->{'code'}} || undef;
\&   }
\&   return '';
\&[/perl]
.Ve
Now the individual items are labeled with a \f(CW\*(C`mv_order_route\*(C'\fR value
which causes their inclusion in the appropriate order routing.
.PP
Upon submission of the order form, any item labeled \f(CW\*(C`HARD\*(C'\fR will be
accumulated and sent to the e-mail address \f(CW\*(C`hardgoods@akopia.com\*(C'\fR,
where the item will be pulled from inventory and shipped.
.PP
Any item labeled \f(CW\*(C`SOFT\*(C'\fR will be passed to the order profile
\&\f(CW\*(C`create_download_link\*(C'\fR, which will place it in a staging area for
customer download. (This would be supported by a link on the receipt,
possibly by reading a value set in the profile).
.PP
The \f(CW\*(C`main\*(C'\fR order routing will use CyberCash to charge the order, and
will be completely encrypted for e-mailing.
.SH "Administering Interchange"
.IX Header "Administering Interchange"
Some utilities are supplied with Interchange and are located in the
VendRoot/bin directory:
.PP
.Vb 7
\& compile_link Compiles an Interchange vlink or tlink CGI link
\& dump         Dumps the session file for a particular catalog
\& expire       Expires sessions for a particular catalog
\& expireall    Expires all catalogs
\& offline      Does offline build of the database(s)
\& update       Does in-place update of the database(s)
\& makecat      Make catalog
.Ve
Some example scripts for other functions are in the \f(CW\*(C`eg/\*(C'\fR directory
of the software distribution.
.PP
Some thought should be given to where the databases, error logs, and
session files should be located, especially on an Internet Service
Provider (\s-1ISP\s0) that might have multiple users sharing an Interchange
server. In particular, it is recommended that all of the session files
and logs be put in a directory that is not writable by the user. If
the directory or file is corrupted, the catalog may crash.
.PP
To test the format of user catalog configuration files before
restarting the server, perform the following test (from VendRoot):
.PP
.Vb 1
\&   bin/interchange -test
.Ve
This will check all configuration files for syntax errors, which might
otherwise prevent a catalog from loading. Once a catalog configures
properly, user reconfiguration will not crash it, but cause an error.
It must be loaded when the server is started.
.Sh "Starting, Stopping, and Re-starting the Servers"
.IX Subsection "Starting, Stopping, and Re-starting the Servers"
The following commands need to have \s-1VENDROOT\s0 replaced with the main
directory where Interchange is installed. If /usr/local/interchange is
the site's Interchange base directory, the start command would be:
.PP
\&\f(CW\*(C`/usr/local/interchange/bin/interchange\*(C'\fR.
.PP
Do a \f(CW\*(C`perldoc VENDROOT/bin/interchange\*(C'\fR for full documentation.
.PP
To start the server with default settings:
.PP
.Vb 1
\&   VENDROOT/bin/interchange
.Ve
It is recommended to issue a restart, otherwise the server will not
run anew if a server is already running.
.PP
.Vb 1
\&   VENDROOT/bin/interchange -restart
.Ve
Assuming the server starts correctly, the names of catalogs as they
are configured will be displayed, along with a message stating the
process \s-1ID\s0 it is running under.
.PP
To re-start the server:
.PP
.Vb 1
\&   VENDROOT/bin/interchange -restart
.Ve
\&\f(CW\*(C`\-r\*(C'\fR is the same as \f(CW\*(C`\-restart\*(C'\fR.
.PP
This is typically done to force Interchange to re-read its
configuration. A message will be displayed stating that a \f(CW\*(C`TERM\*(C'\fR
signal has been sent to the process \s-1ID\s0 the server is running under.
This information is also sent to /usr/local/interchange/error.log.
Check the error.log file for confirmation that the server has
restarted properly.
.PP
To stop the server:
.PP
.Vb 1
\&   VENDROOT/bin/interchange -stop
.Ve
A message will be displayed stating that a \f(CW\*(C`TERM\*(C'\fR signal has been
sent to the process \s-1ID\s0 the server is running under. This information
is also sent to /usr/local/interchange/error.log.
.PP
Because processes waiting for selection on some operating systems
block signals, they may have to wait for HouseKeeping seconds to stop.
The default is 60.
.PP
To terminate the Interchange server with prejudice, in case it will
not stop, set:
.PP
.Vb 1
\&   VENDROOT/bin/interchange -kill
.Ve
.Sh "\s-1UNIX\s0 and \s-1INET\s0 Modes"
.IX Subsection "UNIX and INET Modes"
Both UNIX-domain and INET-domain sockets can be used for
communication. \s-1INET\s0 domain sockets are useful when more than one Web
server, connected via a local-area network (\s-1LAN\s0), is used for
accessing an Interchange server.
.PP
\&\s-1IMPORTANT\s0 \s-1NOTE:\s0 When sending sensitive information like credit card
numbers over a network, always ensure that the data is secured by a
firewall, or that the Interchange server runs on the same machine as
any SSL-based server used for encryption.
.PP
If only running a site with one method of communication, use the \f(CW\*(C`\-\*(C'\fRi
and \f(CW\*(C`\-\*(C'\fRu flags.
.PP
.Vb 2
\&   # Start only in UNIX mode
\&   VENDROOT/bin/interchange -r -u
.Ve
.Vb 2
\&   # Start only in INET mode
\&   VENDROOT/bin/interchange -r -i
.Ve
.Sh "User Reconfiguration"
.IX Subsection "User Reconfiguration"
The individual catalogs can be reconfigured by the user by running the
\&\f(CW\*(C`[reconfig]\*(C'\fR support tag. This should be protected by one of the
several forms of Interchange authentication, preferably by \s-1HTTP\s0 basic
authorization. See \f(CW\*(C`RemoteUser\*(C'\fR.
.PP
Use reconfigure from the command line (as the Interchange user) with:
.PP
.Vb 1
\&   VENDROOT/bin/interchange -reconfig <catalog>
.Ve
It is easy to manually reconfigure a catalog as an administrator.
Interchange simply looks for a file \f(CW\*(C`etc/reconfig\*(C'\fR (based in the
Interchange software directory) at HouseKeeping time. If it finds a
script name that matches one of the catalogs, it will reconfigure that
catalog.
.Sh "Making the Product Database"
.IX Subsection "Making the Product Database"
The \s-1DBM\s0 product databases can be built off-line with the \f(CW\*(C`offline\*(C'\fR
command. The directory to be used for output is specified either on
the command line with the \f(CW\*(C`\-d\*(C'\fR option, or is taken from the
\&\f(CW\*(C`catalog.cfg\*(C'\fR directive OfflineDir; \f(CW\*(C`offline\*(C'\fR in the catalog
directory by default. The directory must exist. The source \s-1ASCII\s0 files
should be present in that directory, and the \s-1DBM\s0 files are created
there. Existing files will be overwritten.
.PP
.Vb 1
\&   offline -c catalog [-d offline_dir]
.Ve
Do a \f(CW\*(C`perldoc VENDROOT/bin/offline\*(C'\fR for full documentation.
.Sh "Updating Individual Records"
.IX Subsection "Updating Individual Records"
If a site has a very large \s-1DBM\s0 database that takes time to build,
consider using the \f(CW\*(C`bin/update\*(C'\fR script to change just one field in a
record, or to add from a corrections list.
.PP
The following updates the products database \f(CW\*(C`price\*(C'\fR field for item
19\-202 with the new value 25.00
.PP
.Vb 1
\&   update -c catalog -k 19-202 -f price 25.00
.Ve
More than one field can be updated on a single command line.
.PP
.Vb 1
\&   update -c catalog -k 19-202 -f price -f comment 25.00 "That pitchfork couple"
.Ve
The following takes input from \f(CW\*(C`file\*(C'\fR, which must be \fBformatted
exactly like the original database\fR and adds/corrects any records
contained therein.
.PP
.Vb 1
\&   update -c catalog -i file
.Ve
Invoke the command without any arguments for a usage message
describing the options.
.Sh "Expiring Sessions"
.IX Subsection "Expiring Sessions"
If a site has \s-1DBM\s0 capability and Interchange is using it to store the
sessions, periodically expire old sessions to keep the session
database file from growing too large.
.PP
.Vb 1
\&   expire -c catalog
.Ve
There is also an \f(CW\*(C`expireall\*(C'\fR script which reads all catalog entries
in \f(CW\*(C`interchange.cfg\*(C'\fR and runs \f(CW\*(C`expire\*(C'\fR on them.
.PP
The \f(CW\*(C`expire\*(C'\fR script accepts a \f(CW\*(C`\-r\*(C'\fR option which tells it to recover
lost disk space.
.PP
On a \s-1UNIX\s0 server, add a crontab entry such as the following:
.PP
.Vb 2
\&   # once a day at 4:40 am
\&   40 4 * * *    perl /usr/local/interchange/bin/expireall -r
.Ve
Interchange will wait until the current transaction is finished before
expiring, so that this can be done at any time without disabling Web
access. Any search paging files for the affected session (kept in
\&\f(CW\*(C`ScratchDir\*(C'\fR) will be removed as well.
.PP
If not running \s-1DBM\s0 sessions, a Perl script can be used to delete all
files not modified in the last one or two days. The following will
work if given an argument of the session directory or session files:
.PP
.Vb 2
\&   #!perl
\&   # expire_sessions.pl -- delete files 2 days old or older
.Ve
.Vb 5
\&   my @files;
\&   my $dir;
\&   foreach $dir (@ARGV) {
\&       # just push files on the list
\&       if (-f $dir) { push @files, $_; next; }
.Ve
.Vb 1
\&       next unless -d $dir;
.Ve
.Vb 4
\&       # get all the file names in the directory
\&       opendir DIR, $dir or die "opendir $dir: $!\en";
\&       push @files, ( map { "$dir/$_" } grep(! /^\e.\e.?$/, readdir DIR) ) ;
\&   }
.Ve
.Vb 8
\&   for (@files) {
\&       unless (-f $_) {
\&           warn "skipping $_, not a file.\en";
\&           next;
\&       }
\&       next unless -M $_ >= 2;
\&       unlink $_ or die "unlink $_: $!\en";
\&   }
.Ve
It would be run with a command invocation like:
.PP
.Vb 1
\&   perl expire_sessions.pl /usr/local/interchange/catalogs/construct/session
.Ve
Give it multiple directory names, if there is more than one catalog.
.PP
This script can be adjusted or refined as needed. Refinements might
include reading the file to \*(L"eval\*(R" the session reference and expire
only customers who are not members.
.Sh "Administrator Permissions"
.IX Subsection "Administrator Permissions"
Select which operations each administrator can perform in the back
office. Each section of the back office can be restricted with
fine-grained control. An administrator can be given access to view the
list of all orders, for instance, but not allowed to view details.
Access to the rows of Interchange's internal tables can also be
restricted on a per-table basis for each administrator.
.Sh "Administrators"
.IX Subsection "Administrators"
The Access Manager allows an administrator to create user accounts or
groups of users and restrict the use of certain features. This feature
is especially useful if a company has employees that need the ability
to check orders, but not change Web content. Note that, by default,
users in the back office are stored and managed separately from
customer login accounts. Users can have permissions granted on an
individual basis, or by group. If a user is a \*(L"super-user,\*(R" all other
permissions settings will be ignored and the user will be allowed to
do anything.
.Sh "Administrators: Edit Affiliates"
.IX Subsection "Administrators: Edit Affiliates"
Affiliates have the following attributes:
.PP
\&\*(L"Affiliate \s-1ID\s0\*(R" is displayed in the order and traffic statistics along
with the orders and traffic they produce.
.PP
\&\*(L"Affiliate Name\*(R" is the name of the affiliate.
.PP
\&\*(L"Campaigns\*(R" can be used to track traffic from advertising campaigns.
.PP
\&\*(L"Join_date\*(R" can be used to keep track of when the affiliate signed up.
.PP
\&\*(L"\s-1URL\s0\*(R" is used, if present, to redirect visitors coming from this
affiliate to a special home page just for visitors from that
affiliate's site. This should not be the \s-1URL\s0 of the Affiliate's home
site.
.PP
\&\*(L"Timeout delay\*(R" can be used to specify that orders attributed to this
affiliate must happen within a certain amount of time from the time
they were referred to the site by the affiliate. Measured in seconds.
.Sh "Direct Table Edit"
.IX Subsection "Direct Table Edit"
Edit any of Interchange's internal tables. Select a table to edit, or
search a table for selected rows to edit.
.Sh "Direct Table Edit: Select for Table Edit"
.IX Subsection "Direct Table Edit: Select for Table Edit"
Having selected a table to edit, a new row can be added, an existing
row edited, all rows edited spreadsheet-style, or a row deleted.
.Sh "File Transfer"
.IX Subsection "File Transfer"
Transfer pages, templates, and configuration files to and from the
Interchange installation. Select \f(CW\*(C`Pages\*(C'\fR to transfer files that will
be visible to site visitors. Select \f(CW\*(C`catalog.cfg\*(C'\fR to edit the
configuration file for the store. \f(CW\*(C`Upload\*(C'\fR (send a file to the
server), \f(CW\*(C`download\*(C'\fR (send a file from the server to a computer),
\&\f(CW\*(C`view\*(C'\fR, or \f(CW\*(C`edit\*(C'\fR available files.
.Sh "Import/Export"
.IX Subsection "Import/Export"
Interchange makes it easy to import and export data to and from a
commerce Web site.
.PP
Use \f(CW\*(C`Database Upload\*(C'\fR to import a tab delimited database of all
product information to Interchange to make set-up faster and easier.
\&\f(CW\*(C`Database Download\*(C'\fR does just the opposite, allowing data to be
downloaded from Interchange.
.PP
Use \f(CW\*(C`Layout Upload\*(C'\fR to upload a site's layout information. Use
C>Layout Download> to download a site's layout information.
.Sh "Logout"
.IX Subsection "Logout"
This feature will only be useful if there are multiple users in the
Access Manager. When \f(CW\*(C`logout\*(C'\fR is clicked, a user will be asked to log
in again. If \f(CW\*(C`logout\*(C'\fR is pressed in error, the user must log in
again.
.Sh "Meta Field Information"
.IX Subsection "Meta Field Information"
Interchange can store meta information for selected columns of tables
in a site's database. This meta information is used when the user
interacts with the database. For example, the meta informaton for a
\&\f(CW\*(C`Hide Item\*(C'\fR field might specify that a checkbox be displayed when the
user edits that field, since the only reasonable values are \f(CW\*(C`on\*(C'\fR and
\&\f(CW\*(C`off\*(C'\fR. Or, the meta information might specify a filter on data
entered for a \f(CW\*(C`Filename\*(C'\fR field which makes sure that the characters
entered are safe for use in a filename.
.PP
\&\f(CW\*(C`Widget type\*(C'\fR specifies the \f(CW\*(C`HTML INPUT\*(C'\fR tag type to use when
displaying the field in, say, the item editor.
.PP
\&\f(CW\*(C`Width\*(C'\fR and \f(CW\*(C`Height\*(C'\fR only apply to some of the \f(CW\*(C`Widget type\*(C'\fR
options, for instance the \f(CW\*(C`Textarea\*(C'\fR widget.
.PP
\&\f(CW\*(C`Label\*(C'\fR is displayed instead of the internal column name. For
example, the \f(CW\*(C`category\*(C'\fR column of the \f(CW\*(C`products\*(C'\fR table might have a
label of \f(CW\*(C`Product Category\*(C'\fR.
.PP
\&\f(CW\*(C`Help\*(C'\fR is displayed below the column label, and helps describe the
purpose of the field to the user.
.PP
\&\f(CW\*(C`Help url\*(C'\fR can be used to link to a page giving more information on
the field.
.PP
\&\f(CW\*(C`Lookup\*(C'\fR can be used when a field is acting like a foreign key into
another table. In that case, use some sort of select box as the widget
type, and if referencing multiple rows in the destination table, use a
multi select box, with \f(CW\*(C`colons_to_null\*(C'\fR as the \f(CW\*(C`pre_filter\*(C'\fR, and
\&\f(CW\*(C`::\*(C'\fR as the \f(CW\*(C`lookup_exclude\*(C'\fR.
.PP
\&\f(CW\*(C`Filter\*(C'\fR and \f(CW\*(C`pre_filter\*(C'\fR can be used to filter data destined for
that field or data read from that field, respectively.
.SH "Interchange Security"
.IX Header "Interchange Security"
.Sh "\s-1SSL\s0 Support"
.IX Subsection "SSL Support"
Interchange has several features that enable secure ordering via \s-1SSL\s0
(Secure Sockets Layer). Despite their mystique, \s-1SSL\s0 servers are
actually quite easy to operate. The difference between the standard
\&\s-1HTTP\s0 server and the \s-1SSL\s0 \s-1HTTPS\s0 server, from the standpoint of the user,
is only in the encryption and the specification of the \s-1URL\s0; \f(CW\*(C`https:\*(C'\fR
is used for the \s-1URL\s0 protocol specification instead of the usual http:
designation.
.PP
\&\fB\s-1IMPORTANT\s0 \s-1NOTE:\s0 \fRInterchange attempts to perform operations
securely, but no guarantees or warranties of any kind are made! Since
Interchange comes with Perl source, it is possible to modify the
program to create security problems. One way to minimize this
possibility is to record digital signatures, using \s-1MD5\s0 or \s-1PGP\s0, of
\&\f(CW\*(C`interchange\*(C'\fR, \f(CW\*(C`interchange.cfg\*(C'\fR, and all modules included in
Interchange. Check them on a regular basis to ensure they have not
been changed.
.PP
Interchange uses the \f(CW\*(C`SecureURL\*(C'\fR directive to set the base \s-1URL\s0 for
secure transactions, and the \f(CW\*(C`VendURL\*(C'\fR directive for normal
non-secure transactions. Secure URLs can be enabled for forms through
a form action of \f(CW\*(C`[process\-target secure=1]\*(C'\fR. An individual page can
be displayed via \s-1SSL\s0 with \f(CW\*(C`[page href=mvstyle_pagename secure=1]\*(C'\fR. A
certain page can be set to be always secure with the \f(CW\*(C`AlwaysSecure\*(C'\fR
catalog.cfg directive.
.PP
Interchange incorporates additional security for credit card numbers.
The field \f(CW\*(C`mv_credit_card_number\*(C'\fR will not ever be written to disk.
.PP
To enable automated encryption of the credit card information, the
directive \f(CW\*(C`CreditCardAuto\*(C'\fR needs to be defined as \f(CW\*(C`Yes\*(C'\fR.
\&\f(CW\*(C`EncryptProgram\*(C'\fR also needs to be defined with some value, one which
will, hopefully, encrypt the number. \s-1PGP\s0 is now recommended above all
other encryption program. The entries should look something like:
.PP
.Vb 2
\& CreditCardAuto   Yes
\& EncryptProgram   /usr/bin/pgpe -fat -r sales@company.com
.Ve
See \f(CW\*(C`CreditCardAuto\*(C'\fR for more information on how to set the form
variables.
.Sh "Administrative Pages"
.IX Subsection "Administrative Pages"
With Interchange's \f(CW\*(C`GlobalSub\*(C'\fR capability, very complex add-on
schemes can be implemented with Perl subroutines. And with the new
writable database, pages that modify the catalog data can be made. See
\&\f(CW\*(C`MasterHost\*(C'\fR, \f(CW\*(C`RemoteUser\*(C'\fR, and \f(CW\*(C`Password\*(C'\fR.
.PP
In addition, any Interchange page subdirectory can be protected from
access by anyone except the administrator if a file called '.access'
is present and non-zero in size.
.Sh "Controlling Access to Certain Pages"
.IX Subsection "Controlling Access to Certain Pages"
If the directory containing the page has a file \f(CW\*(C`.access\*(C'\fR and that
file's size is zero bytes, access can be gated in one of several ways.
.Ip "1." 4
If the file \f(CW\*(C`.access_gate\*(C'\fR is present, it will be read and scanned
for page-based access. The file has the form:
.Sp
.Vb 1
\&  page: condition
.Ve
.Ip "" 4
The \f(CW\*(C`page\*(C'\fR is the file name of the file to be controlled (the .html
extension is optional). The \f(CW\*(C`condition\*(C'\fR is either a literal \f(CW\*(C`Yes/No\*(C'\fR
or Interchange tags which would produce a \f(CW\*(C`Yes\*(C'\fR or \f(CW\*(C`No\*(C'\fR (1/0 work
just fine, as do true/false).
.Sp
The entry for \f(CW\*(C`*\*(C'\fR sets the default action if the page name is not
found. If pages will be allowed by default, set it to \f(CW\*(C`1\*(C'\fR or \f(CW\*(C`Yes\*(C'\fR.
If pages are to be denied by default in this directory, leave blank or
set to \f(CW\*(C`No\*(C'\fR. Here is an example, for the directory \f(CW\*(C`controlled\*(C'\fR,
having the following files:
.Sp
.Vb 1
\& -rw-rw-r--   1 mike     mike            0 Jan  8 14:19 .access
.Ve
.Ip "" 4
The contents of \f(CW\*(C`.access_gate\*(C'\fR:
.Sp
.Vb 1
\&   foo.html: [if session username eq 'flycat']
.Ve
.Ip "" 4
The page \f(CW\*(C`controlled/foo\*(C'\fR is only allowed for the logged-in user
\&\fBflycat\fR.
.Sp
The page \f(CW\*(C`controlled/bar\*(C'\fR is allowed for the logged-in user
\&\fBflycat\fR, or if the scratch variable \f(CW\*(C`allow_bar\*(C'\fR is set to a
non-blank, non-zero value.
.Sp
The page \f(CW\*(C`controlled/baz\*(C'\fR is always allowed for display.
.Sp
The page \f(CW\*(C`controlled/any\*(C'\fR (or any other page in the directory not
named in \f(CW\*(C`.access_gate\*(C'\fR) will be allowed for any user logged in via
\&\fIUserDB\fR. \s-1NOTE:\s0 The \f(CW\*(C`.access_gate\*(C'\fR scheme is available for database
access checking if the database is defined as an \f(CW\*(C`AdminDatabase\*(C'\fR. The
\&\f(CW\*(C`.access_gate\*(C'\fR file is located in \f(CW\*(C`ProductDir\*(C'\fR.
.Ip "2." 4
If the Variable \f(CW\*(C`MV_USERDB_REMOTE_USER\*(C'\fR is set (non-zero and
non-blank), any user logged in via the UserDB feature will receive
access to all pages in the directory. \s-1NOTE:\s0 If there is a
\&\f(CW\*(C`.access_gate\*(C'\fR file, it overrides this.
.Ip "3." 4
If the variables \f(CW\*(C`MV_USERDB_ACL_TABLE\*(C'\fR is set to a valid database
identifier, the UserDB module can control access with simple \s-1ACL\s0
logic. See \s-1USER\s0 \s-1DATABASE\s0. \s-1NOTE:\s0 If there is a \f(CW\*(C`.access_gate\*(C'\fR file, it
overrides this. Also, if \f(CW\*(C`MV_USERDB_REMOTE_USER\*(C'\fR is set, this
capability is not available.
.SH "Usertag Reference"
.IX Header "Usertag Reference"
.Sh "email"
.IX Subsection "email"
.Vb 7
\&   UserTag email Order to subject reply from extra
\&   UserTag email hasEndTag
\&   UserTag email Interpolate
\&   UserTag email Routine <<EOR
\&   sub {
\&       my($to, $subject, $reply, $from, $extra, $body) = @_;
\&       my($ok);
.Ve
.Vb 1
\&       $subject = '<no subject>' unless defined $subject && $subject;
.Ve
.Vb 6
\&       $reply = '' unless defined $reply;
\&       $reply = "Reply-to: $reply\en" if $reply;
\&       if (! $from) {
\&               $from = $Vend::Cfg->{MailOrderTo};
\&               $from =~ s/,.*//;
\&       }
.Ve
.Vb 15
\&       $extra =~ s/\es*$/\en/ if $extra;
\&       $ok = 0;
\&       SEND: {
\&           open(Vend::MAIL,"|$Vend::Cfg->{SendMailProgram} -t") or last SEND;
\&           print Vend::MAIL
\&                       "To: $to\en",
\&                       "From: $from\en",
\&                       $reply,
\&                       $extra || '',
\&                       "Subject: $subject\en\en",
\&                       $body
\&               or last SEND;
\&           close Vend::MAIL or last SEND;
\&           $ok = ($? == 0);
\&       }
.Ve
.Vb 12
\&       if (!$ok) {
\&           logError("Unable to send mail using $Vend::Cfg->{'SendMailProgram'}\en" .
\&               "To '$to'\en" .
\&               "From '$from'\en" .
\&               "With extra headers '$extra'\en" .
\&               "With reply-to '$reply'\en" .
\&               "With subject '$subject'\en" .
\&               "And body:\en$body");
\&       }
\&       $ok;
\&   }
\&   EOR
.Ve
.Sh "email_raw"
.IX Subsection "email_raw"
.Vb 1
\&   UserTag email_raw Documentation <<EOD
.Ve
.Vb 2
\&   This tag takes a raw email message, *including headers*, and
\&   users the SendmailProgram with -t option. Example:
.Ve
.Vb 4
\&   [email-raw]
\&   From: foo@bar.com
\&   To: bar@foo.com
\&   Subject: baz
.Ve
.Vb 2
\&   The text of the message.
\&   [/email-raw]
.Ve
.Vb 2
\&   The headers must be at the beginning of the line, and the header
\&   must have a valid To: or it will not be delivered.
.Ve
.Vb 1
\&   EOD
.Ve
.Vb 7
\&   UserTag email-raw hasEndTag
\&   UserTag email-raw Interpolate
\&   UserTag email-raw Routine <<EOR
\&   sub {
\&       my($body) = @_;
\&       my($ok);
\&       $body =~ s/^\es+//;
.Ve
.Vb 8
\&       SEND: {
\&           open(Vend::MAIL,"|$Vend::Cfg->{SendMailProgram} -t") or last SEND;
\&           print Vend::MAIL $body
\&               or last SEND;
\&           close Vend::MAIL
\&               or last SEND;
\&           $ok = ($? == 0);
\&       }
.Ve
.Vb 7
\&       if (!$ok) {
\&           ::logError("Unable to send mail using $Vend::Cfg->{SendMailProgram}\en" .
\&               "Message follows:\en\en$body");
\&       }
\&       $ok;
\&   }
\&   EOR
.Ve
.Sh "loc"
.IX Subsection "loc"
.Vb 24
\&   # [loc locale*] message [/loc]
\&   #
\&   # This tag is the equivalent of [L] ... [/L] localization, except
\&   # it works with contained tags
\&   #
\&   UserTag loc hasEndTag   1
\&   UserTag loc Interpolate 1
\&   UserTag loc Order locale
\&   UserTag loc Routine <<EOF
\&   sub {
\&       my ($locale, $message) = @_;
\&       return $message unless $Vend::Cfg->{Locale};
\&       my $ref;
\&       if($locale) {
\&           return $message
\&               unless defined $Vend::Cfg->{Locale_repository}{$locale};
\&           $ref = $Vend::Cfg->{Locale_repository}{$locale}
\&       }
\&       else {
\&           $ref = $Vend::Cfg->{Locale};
\&       }
\&       return defined $ref->{$message} ? $ref->{$message} : $message;
\&   }
\&   EOF
.Ve
