#!/usr/bin/perl -- -*-cperl-*-

## Check all the perl blocks embedded in ITL tags in one or more files
## Greg Sabino Mullane <greg@endpoint.com>

use strict;
use warnings;
use Getopt::Long;

our $VERSION = '1.0.1';

@ARGV or show_help();

my $opt= {
          verbose      => 0,
          keeptempfile => 0,
          quiet        => 0,
          };

GetOptions ## no critic (ProhibitCallsToUndeclaredSubs)
    ($opt,
     'verbose+',
     'help',
     'keeptempfile',
     'quiet'
     );

$opt->{help} and show_help();

sub show_help {

    print qq{
Usage: $0 [Options] filename(s)
Description: Checks that perl blocks in ITL code is valid
Options:
  --help          Show this help message
  --verbose       Verbose output
  --keeptempfile  Do not erase the temporary file(s) created
  --quiet         Show failing files only

};
    exit;
}

my %seenit;
for my $file (@ARGV) {
    next if $seenit{$file}++;
    if (-d $file) {
        $opt->{verbose} and print qq{** Skipping directory "$file"\n};
        next;
    }
    if (! -f $file) {
        $opt->{verbose} and print qq{** Skipping "$file"\n};
        next;
    }
    if ($file =~ /\.tmp$/o) {
        $opt->{verbose} and print qq{** Skipping temp file "$file"\n};
        next;
    }
    check_perl_itl($file);
}

exit;

sub check_perl_itl {

    my $file = shift;
    open my $rh, '<', $file or die qq{Could not open "$file": $!\n};

    my $tempfile = "$file.perltest.tmp";
    open my $wh, '>', $tempfile or die qq{Could not write "$tempfile": $!\n};
    $opt->{verbose} >= 2 and print qq{** Wrote "$tempfile"\n};
    my $top = qq{#!perl

## Temporary file created by extracting perl blocks from the file "$file"

use strict;
use warnings;
};
$top .= q{use vars qw/
$CGI
$CGI_array
$Carts
$Config
$DbSearch
$Document
$Scratch
$Session
$Tag
$TextSearch
$Tmp
$Values
$Variable
%Sql %Db
/;

};

    print $wh $top;
    my $templines = $top =~ tr/\n/\n/;

    my $inperl = 0;
    my $subnum = 0;
    my %mapline;
    while (<$rh>) {

        if (!$inperl) {
            next unless m{\[perl\s*([^\]]*)\](.*?)(\[/perl\])?$};
            my ($attr,$extra, $closetag) = ($1,$2,$3);
            $inperl = 1;
            $subnum++;
            print $wh "sub perl_itl_$subnum {\n";
            $templines++;
            if (length $extra and $extra =~ /\S/) {
                print $wh "$extra\n";
                $mapline{++$templines} = $.;
            }
            if ($closetag) {
                print $wh "\n} ## end of perl_itl_$subnum\n\n";
                $templines += 3;
                $inperl = 0;
            }
            next;
        }

        if (m{(.*)\Q[/perl]}o) {
            my $pre = $1;
            print $wh "$pre\n} ## end of perl_itl_$subnum\n\n";
            $templines += 3;
            $inperl = 0;
            next;
        }

        print $wh "$_";
        $mapline{++$templines} = $.;
    }
	close $wh or die qq{Could not close "$tempfile": $!\n};

    if ($opt->{verbose} >= 2) {
        print "** Subroutines found: $subnum\n";
        print "** Lines in original file: $.\n";
        print "** Lines in temp file: $templines\n";
    }

    close $rh or die qq{Could not close "$file": $!\n};

    my $errors = qx{perl -c $tempfile 2>&1};
    unlink $tempfile unless $opt->{keeptempfile};

    if ($errors !~ /had compilation errors/) {
        print qq{File "$file" had no Perl problems\n} unless $opt->{quiet};
        return;
    }

    print qq{File "$file" has the following Perl problems:\n};
    for my $line (split /\n/ => $errors) {
        next if $line =~ /had compilation errors/o;
        chomp $line;

        $line =~ s/at $tempfile line (\d+)\.?/exists $mapline{$1} ? "(line $mapline{$1})" : "(original line $1)"/e;
        print "--> $line\n";
    }

    return;
}

