# Connection routine for SkipJack
#
# by Matthew Schick <mschick@brightredproductions.com> for Bright Red Productions with code reused and inspired by
#	Michael Bacarella <mbac@nyct.net>
#	Troy Davis <troy@slipstream.com>  
#	Mike Heins <mike@minivend.com> 
#	webmaster@nameastar.net 
#   Jeff Nappi <brage@cyberhighway.net> 
#   Paul Delys <paul@gi.alaska.edu> 
#  Ray Desjardins <ray@dfwmicrotech.com>
# Special thanks to Stephan Ralescu <stephan@skipjack.com> from SkipJack for his help

 
Variable SKIPJACK_HELP <<EOV

 1. Modify interchange.cfg to use this file.

 #include globalsub/skipjack

 2. Modify catalog.cfg to set the server and your Skipjack account info as follows


# Serial Number and Payment Mode
 Variable MV_PAYMENT_SERIAL  YourSkipJackSerialNumber
 Variable MV_PAYMENT_MODE    custom skipjack

 3. Make sure CreditCardAuto is off (default in Interchange demos)

 4. You must have the following modules installed
	LWP::UserAgent
        HTTP::Request
        HTTP::Request::Common
        Crypt::SSLeay
 5. Modify the Order.pm (/usr/local/interchange/lib/Vend/Order.pm) to add the 'email' and 'phone_day' mappings.

 6. The posting url is set to the development url.  Change developer.skipjackic.com to www.skipjackic.com to go live.

 7. Restart Interchange.

EOV

GlobalSub <<EOS
sub skipjack {

use LWP::UserAgent;
use HTTP::Request;
use HTTP::Request::Common;
use Crypt::SSLeay;

my %CC_ERRORS = (
        '-1'    =>      'Invalid length (-1)',
        '-35'   =>      'Invalid credit card number (-35)',
        '-37'   =>      'Failed communication (-37)',
        '-39'   =>      'Serial number is too short (-39)',
        '-51'   =>      'The zip code is invalid',
        '-52'   =>      'The shipto zip code is invalid',
        '-53'   =>      'Length of expiration date (-53)',
        '-54'   =>      'Length of account number date (-54)',
        '-55'   =>      'Length of street address (-55)',
        '-56'   =>      'Length of shipto street address (-56)',
        '-57'   =>      'Length of transaction amount (-57)',
        '-58'   =>      'Length of name (-58)',
        '-59'   =>      'Length of location (-59)',
        '-60'   =>      'Length of state (-60)',
        '-61'   =>      'Length of shipto state (-61)',
        '-62'   =>      'Length of order string (-62)',
        '-64'   =>      'Invalid phone number (-64)',
        '-65'   =>              'Empty name (-65)',
        '-66'   =>      'Empty email (-66)',
        '-67'   =>      'Empty street address (-66)',
        '-68'   =>      'Empty city (-68)',
        '-69'   =>      'Empty state (-69)',
        '-70'   =>      'Empty zip code (-70)',
        '-71'   =>      'Empty order number (-71)',
        '-72'   =>      'Empty account number (-72)',
        '-73'   =>      'Empty expiration month (-73)',
        '-74'   =>      'Empty expiration year (-74)',
        '-75'   =>      'Empty serial number (-75)',
        '-76'   =>      'Empty transaction amount (-76)',
        '-79'   =>      'Length of customer name (-79)',
        '-80'   =>      'Length of shipto customer name (-80)',
        '-81'   =>      'Length of customer location (-81)',
        '-82'   =>      'Length of customer state (-82)',
        '-83'   =>      'Length of shipto phone (-83)',
        '-84'   =>      'Pos Error duplicate ordernumber (-84)',
        '-91'   =>      'Pos Error CVV2 (-91)',
        '-92'   =>      'Pos Error Approval Code (-92)',
        '-93'   =>      'Pos Error Blind Credits Not Allowed (-93)',
        '-94'   =>      'Pos Error Blind Credits Failed (-94)',
        '-95'   =>      'Pos Error Voice Authorizations Not Allowed (-95)',
        );

my %AVS_CODES = (
        'X' => 'Exact match, 9 digit zip',
        'Y' => 'Exact match, 5 digit zip',
        'A' => 'Address match only',
        'W' => '9 digit match only',
        'Z' => '5 digit match only',
        'N' => 'No address or zip match',
        'U' => 'Address unavailable',
        'R' => 'Issuer system unavailable',
        'E' => 'Not a mail/phone order',
        'S' => 'Service not supported'
        );

        my ($serial, $amount) = @_;

        my (%actual) = Vend::Order::map_actual();

        if(! $serial) {
        $serial  =  $::Variable->{MV_PAYMENT_SERIAL} ||
                    $::Variable->{CYBER_SECRET} 
                    or return undef; 
    } 

    my $server  = $::Variable->{MV_PAYMENT_SERVER}
			|| 'https://www.skipjackic.com/scripts/evolvcc.dll?Authorize';
    my $company = $::Variable->{COMPANY};

    my $precision = $::Variable->{MV_PAYMENT_PRECISION} ||
                    $::Variable->{CYBER_PRECISION} ||
                    2;

    $actual{mv_credit_card_exp_month} =~ s/\D//g;
    $actual{mv_credit_card_exp_month} =~ s/^0+//;
    $actual{mv_credit_card_exp_year} =~ s/\D//g; 
    $actual{mv_credit_card_exp_year} =~ s/\d\d(\d\d)/$1/; 
 
    $actual{mv_credit_card_number} =~ s/\D//g; 
 
    my $exp = sprintf '%02d%02d', 
                        $actual{mv_credit_card_exp_month}, 
                        $actual{mv_credit_card_exp_year};                     
                         
        $actual{cyber_mode} = 'Authorize'
        unless $actual{cyber_mode};

        my %type_map = (
		mauth_capture		=>	'Authorize',
		mauthonly		=>	'AUTH_ONLY',
		CAPTURE_ONLY		=>	'CAPTURE_ONLY',
		CREDIT			=>	'CREDIT',
		VOID			=>	'VOID',
		PRIOR_AUTH_CAPTURE	=>	'PRIOR_AUTH_CAPTURE',
 
	);                        
	 
	if (defined $type_map{$actual{cyber_mode}}) { 
        $actual{cyber_mode} = $type_map{$actual{cyber_mode}}; 
    } 
    else { 
        $actual{cyber_mode} = 'Authorize';
    } 
 
    if(! $amount) { 
        $amount = Vend::Interpolate::total_cost(); 
        $amount = sprintf("%.${precision}f", $amount); 
    }  
     
    my($orderID); 
    my($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime(time()); 
 
    # We'll make an order ID based on date, time, and MiniVend session 
 
    # $mon is the month index where Jan=0 and Dec=11, so we use 
    # $mon+1 to get the more familiar Jan=1 and Dec=12 
    $orderID = sprintf("%02d%02d%02d%02d%02d%05d%s", 
            $year + 1900,$mon + 1,$mday,$hour,$min,$Vend::SessionName); 

        # Join first and last name
        my($fullname);
        $fullname = sprintf($actual{b_fname} . " " . $actual{b_lname});

        # Make a billing address based on both fields... ya never know.
        my($streetaddress);
        if ($actual{b_address2} ne "") {
        $streetaddress = sprintf($actual{b_address1} . "," . $actual{b_address2});
        } else {
        $streetaddress = $actual{b_address1};
        }

        # Create the annoying order string.  Hint Skipjack folks??????
        my($orderstring);
        $orderstring = sprintf($orderID . "~" . $company . "~" . $amount . "~1~N~||");

	# Change MV_PAYMENT_SERVER to developer.skipjackic.com for testing
	my $req = HTTP::Request->new(
		    'POST', $server,
		     [     
			Sjname              => $fullname,
			Email               => $actual{email},
			Streetaddress       => $streetaddress,
			City                => $actual{b_city},
			State               => $actual{b_state},
			Zipcode             => $actual{zip},
			Ordernumber         => $actual{mv_order_number},
			Accountnumber       => $actual{mv_credit_card_number},
			Month               => $actual{mv_credit_card_exp_month},
			Year                => $actual{mv_credit_card_exp_year},
			Serialnumber        => $serial,
			Transactionamount   => $amount,
			Orderstring         => $orderstring,
			Shiptophone         => $actual{phone_day},
		    ],
		);


        my $ua = new LWP::UserAgent;
	$ua->max_size(2048);
# 	$ua->timeout(5);
        my $robot = $ua->request($req);
        my $response = $robot->content;


    # Minivend names are on the  left, Skipjack on the right
    my %result_map = ( qw/
		MStatus               szIsApproved
		pop.status            szAuthorizationResponseCode
		MErrMsg               szAuthorizationDeclinedMessage
		pop.error-message     szAuthorizationDeclinedMessage
		order-id              szOrderNumber
		pop.order-id          szOrderNumber
		pop.auth-code         szAuthorizationResponseCode
		pop.avs_code          szAVSResponseCode
		pop.avs_zip           zipcode
		pop.avs_addr          streetaddress
	/
	);


#::logDebug(qq{\nskipjack response: $response\n});
        my %variables;
	my @lines = split (/</, $response);
	foreach (@lines) {
		chomp;
		$_ =~ s/-->//g;
		if ($_ =~ /^!--(.*)/) {
			my ($name, $val) = split(/=/,$1);
			$variables{$name} = $val;
			}
		}

#::logError(qq{skipjack response_reason_text=$response_reason_text response_code: $response_code});
 
	my %result;
	if ($variables{'szAuthorizationResponseCode'} ne "") {
	$result{MStatus} = 'success';
	$result{'order-id'} = 1; # ? Why this this set to 1? -mark
	} else {
        $result{MStatus} = 'failure';

	# NOTE: A lot more AVS codes could be checked for here.
	if ($variables{'szAVSResponseCode'} eq 'N') {
		$result{MErrMsg} = $AVS_CODES{$variables{'szAVSResponseCode'}};
                my $msg = errmsg("You must enter the correct billing address of your credit card. The bank returned the following error: " . $AVS_CODES{$variables{'szAVSResponseCode'}});
                $Vend::Session->{errors}{mv_credit_card_valid} = $msg;
	} else {
		$result{MErrMsg} = $CC_ERRORS{$variables{'szReturnCode'}};
		my $msg = errmsg("Skipjack error: " . $CC_ERRORS{$variables{'szReturnCode'}} . " Please call in your order or try again." );
		$Vend::Session->{errors}{mv_credit_card_valid} = $msg;
		}
	}

	return (%result);

}
EOS

